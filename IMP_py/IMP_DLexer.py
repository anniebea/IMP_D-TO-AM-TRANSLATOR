# Generated from C:/Users/anitr/OneDrive/Documents/__University/6sem/PVSUS/MD3/IMP_D-TO-AM-TRANSLATOR\IMP_D.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,21,136,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,
        1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,
        86,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,97,8,11,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,
        1,16,1,16,1,17,1,17,1,18,4,18,117,8,18,11,18,12,18,118,1,19,3,19,
        122,8,19,1,19,5,19,125,8,19,10,19,12,19,128,9,19,1,20,4,20,131,8,
        20,11,20,12,20,132,1,20,1,20,0,0,21,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,1,0,6,2,0,43,43,45,45,2,0,42,42,47,47,1,0,48,57,
        3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,
        13,32,32,142,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,1,43,1,0,0,0,3,46,1,0,0,0,5,49,1,0,0,0,7,54,
        1,0,0,0,9,59,1,0,0,0,11,62,1,0,0,0,13,68,1,0,0,0,15,71,1,0,0,0,17,
        74,1,0,0,0,19,76,1,0,0,0,21,85,1,0,0,0,23,96,1,0,0,0,25,98,1,0,0,
        0,27,102,1,0,0,0,29,105,1,0,0,0,31,109,1,0,0,0,33,111,1,0,0,0,35,
        113,1,0,0,0,37,116,1,0,0,0,39,121,1,0,0,0,41,130,1,0,0,0,43,44,5,
        58,0,0,44,45,5,61,0,0,45,2,1,0,0,0,46,47,5,105,0,0,47,48,5,102,0,
        0,48,4,1,0,0,0,49,50,5,116,0,0,50,51,5,104,0,0,51,52,5,101,0,0,52,
        53,5,110,0,0,53,6,1,0,0,0,54,55,5,101,0,0,55,56,5,108,0,0,56,57,
        5,115,0,0,57,58,5,101,0,0,58,8,1,0,0,0,59,60,5,102,0,0,60,61,5,105,
        0,0,61,10,1,0,0,0,62,63,5,119,0,0,63,64,5,104,0,0,64,65,5,105,0,
        0,65,66,5,108,0,0,66,67,5,101,0,0,67,12,1,0,0,0,68,69,5,100,0,0,
        69,70,5,111,0,0,70,14,1,0,0,0,71,72,5,111,0,0,72,73,5,100,0,0,73,
        16,1,0,0,0,74,75,7,0,0,0,75,18,1,0,0,0,76,77,7,1,0,0,77,20,1,0,0,
        0,78,79,5,60,0,0,79,86,5,62,0,0,80,81,5,61,0,0,81,86,5,60,0,0,82,
        83,5,62,0,0,83,86,5,61,0,0,84,86,2,60,62,0,85,78,1,0,0,0,85,80,1,
        0,0,0,85,82,1,0,0,0,85,84,1,0,0,0,86,22,1,0,0,0,87,88,5,84,0,0,88,
        89,5,114,0,0,89,90,5,117,0,0,90,97,5,101,0,0,91,92,5,70,0,0,92,93,
        5,97,0,0,93,94,5,108,0,0,94,95,5,115,0,0,95,97,5,101,0,0,96,87,1,
        0,0,0,96,91,1,0,0,0,97,24,1,0,0,0,98,99,5,97,0,0,99,100,5,110,0,
        0,100,101,5,100,0,0,101,26,1,0,0,0,102,103,5,111,0,0,103,104,5,114,
        0,0,104,28,1,0,0,0,105,106,5,110,0,0,106,107,5,111,0,0,107,108,5,
        116,0,0,108,30,1,0,0,0,109,110,5,59,0,0,110,32,1,0,0,0,111,112,5,
        40,0,0,112,34,1,0,0,0,113,114,5,41,0,0,114,36,1,0,0,0,115,117,7,
        2,0,0,116,115,1,0,0,0,117,118,1,0,0,0,118,116,1,0,0,0,118,119,1,
        0,0,0,119,38,1,0,0,0,120,122,7,3,0,0,121,120,1,0,0,0,122,126,1,0,
        0,0,123,125,7,4,0,0,124,123,1,0,0,0,125,128,1,0,0,0,126,124,1,0,
        0,0,126,127,1,0,0,0,127,40,1,0,0,0,128,126,1,0,0,0,129,131,7,5,0,
        0,130,129,1,0,0,0,131,132,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,
        0,133,134,1,0,0,0,134,135,6,20,0,0,135,42,1,0,0,0,8,0,85,96,118,
        121,124,126,132,1,6,0,0
    ]

class IMP_DLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    WEAKOP = 9
    STRONGOP = 10
    RELATION = 11
    BOOL = 12
    CONJUNCTION = 13
    DISCJUNCTION = 14
    NOT = 15
    SEMICOLON = 16
    LPARENTHESIS = 17
    RPARENTHESIS = 18
    NUMBER = 19
    VARNAME = 20
    WS = 21

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':='", "'if'", "'then'", "'else'", "'fi'", "'while'", "'do'", 
            "'od'", "'and'", "'or'", "'not'", "';'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "WEAKOP", "STRONGOP", "RELATION", "BOOL", "CONJUNCTION", "DISCJUNCTION", 
            "NOT", "SEMICOLON", "LPARENTHESIS", "RPARENTHESIS", "NUMBER", 
            "VARNAME", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "WEAKOP", "STRONGOP", "RELATION", "BOOL", "CONJUNCTION", 
                  "DISCJUNCTION", "NOT", "SEMICOLON", "LPARENTHESIS", "RPARENTHESIS", 
                  "NUMBER", "VARNAME", "WS" ]

    grammarFileName = "IMP_D.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


